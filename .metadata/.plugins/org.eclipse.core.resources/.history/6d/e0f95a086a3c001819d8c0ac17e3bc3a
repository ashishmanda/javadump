package cmsc433.p3;

import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.RecursiveTask;

import cmsc433.p3.SkippingMazeSolver.SolutionFound;


@SuppressWarnings("serial")
public class MazeTask extends RecursiveTask<LinkedList<Direction>>{
	private static  Maze maze;
	private final Position p;
	private final int forkdepth;
	private static Set<Position> visited = Collections.synchronizedSet(new HashSet<Position>());
	private final static int THRESHOLD = 0;
	
	public MazeTask(Maze maze) {
		MazeTask.maze = maze;
		this.p = maze.getStart();
		forkdepth = 1;
	}
	
	public MazeTask(Position p, int lastdepth) {
		this.p = p;
		forkdepth = lastdepth + 1;
	}

	@SuppressWarnings("unused")
	@Override
	protected LinkedList<Direction> compute() {
		if(maze.getEnd().equals(p)) {
			return new LinkedList<Direction>();
		}else {
			MazeTask.visited.add(p);
			List<Direction> ds = maze.getMoves(p);
			for (Direction d  : ds) {
				Position nextP = p.move(d);
				if(!visited.contains(nextP)) {
					LinkedList<Direction> sol;
					if(forkdepth < THRESHOLD || THRESHOLD < 0) {
						sol = new MazeTask(nextP, forkdepth+1).fork().join();
					} else {
						return (LinkedList<Direction>) solveDFS(nextP, d);
					}
					if(sol != null) {
						
							sol.addFirst(d);
						return sol;
					}
				}
				
			}
		}
		
		return null;
		
		
	}
	
	private boolean atEnd( Position p) {
		return maze.getEnd().equals(p);
	}
	
	private Choice getChoices(Position p, Direction from) {
		LinkedList<Direction> moves = maze.getMoves(p);
		Direction rev = from.reverse();
		moves.remove(rev);
		return new Choice(p, from, moves);
	}
	
	private Choice getChoices(Position p) {
		return new Choice(p, null , maze.getMoves(p));
	}
	
	private  LinkedList<Direction> getMoves(Position p, Direction from){
		LinkedList<Direction> moves = maze.getMoves(p);
		Direction rev = from.reverse();
		moves.remove(rev);
		return moves;
	}
	
	private Choice follow(Position p, Direction to) {
		LinkedList<Direction> moves = null;
		Position np = p;
		 do {
			if(maze.canMove(np, to)) {
				np = np.move(to);
			} else return null;
			
			moves = getMoves(np, to);
			
		}while(moves.size() == 1);
		 
		if(moves.size() == 0) {
			return null;
		}
		else return new Choice(np , to, moves);
	}
	
	private LinkedList<Direction> reconstructPath(LinkedList<Choice> stack){
		LinkedList<Direction> r = new LinkedList<Direction>();
		for(Choice c : stack) {
			r.addFirst(c.choices.peek());
		}
		return r;
	}
	
	private void printStack(LinkedList<Choice> stack) {
		System.out.print("[ ");
		for (Choice c : stack) {
			System.out.print("[ ");
			for(Direction d : c.choices) {
				System.out.print(d.toString());
			}
			System.out.print(" ]");
		}
		System.out.print(" ]\n");
	}
	
	private LinkedList<Direction> solveDFS(Position p, Direction from){
		Choice ch = getChoices(p, from);
		Choice ch2 = null;
		LinkedList<Choice> stack = new LinkedList<Choice>();
		
		stack.push(ch);
		
		while(!stack.isEmpty()){
			ch = stack.peek();
			ch2 = follow(ch.at, ch.choices.peek());
			
			if(ch2 == null) {
				if(ch.choices.size() > 1){
					ch.choices.pop();
				} else {
					stack.pop();
				}
			} else {
				if(atEnd(ch.at)) {
					return reconstructPath(stack);
				} else {
					stack.push(ch2);
				}
			}
			
			
		}
		
		return null;
	}
	
	

}
