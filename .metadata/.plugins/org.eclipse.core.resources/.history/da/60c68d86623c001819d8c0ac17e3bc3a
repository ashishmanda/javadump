package cmsc433.p3;

import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.RecursiveTask;

import cmsc433.p3.SkippingMazeSolver.SolutionFound;


@SuppressWarnings("serial")
public class MazeTask extends RecursiveTask<LinkedList<Direction>>{
	public class SolutionFound extends Exception {
		public Position pos;
		public Direction from;

		public SolutionFound(Position pos, Direction from) {
			this.pos = pos;
			this.from = from;
		}
	}
	
	private static  Maze maze;
	private final Position p;
	private final int forkdepth;
	private static Set<Position> visited = Collections.synchronizedSet(new HashSet<Position>());
	private final static int THRESHOLD = 0;
	
	public MazeTask(Maze maze) {
		MazeTask.maze = maze;
		this.p = maze.getStart();
		forkdepth = 1;
	}
	
	public MazeTask(Position p, int lastdepth) {
		this.p = p;
		forkdepth = lastdepth + 1;
	}

	@SuppressWarnings("unused")
	@Override
	protected LinkedList<Direction> compute() {
		if(maze.getEnd().equals(p)) {
			return new LinkedList<Direction>();
		}else {
			MazeTask.visited.add(p);
			List<Direction> ds = maze.getMoves(p);
			for (Direction d  : ds) {
				Position nextP = p.move(d);
				if(!visited.contains(nextP)) {
					LinkedList<Direction> sol;
					if(forkdepth < THRESHOLD || THRESHOLD < 0) {
						sol = new MazeTask(nextP, forkdepth+1).fork().join();
					} else {
						return (LinkedList<Direction>) solveDFS(nextP, d);
					}
					if(sol != null) {
						
							sol.addFirst(d);
						return sol;
					}
				}
				
			}
		}
		
		return null;
		
		
	}
	
	private boolean atEnd( Position p) {
		return maze.getEnd().equals(p);
	}
	
	private LinkedList<Direction> solveDFS(Position p){
		
	}
	
	

}
