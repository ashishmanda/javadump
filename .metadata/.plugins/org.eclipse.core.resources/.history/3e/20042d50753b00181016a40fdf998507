package cmsc433.p3;

import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.RecursiveTask;

public class MazeTask extends RecursiveTask<List<Direction>>{
	/**
	 * 
	 */
	private static final long serialVersionUID = -1533644862234875028L;
	
	
	private final Maze maze;
	
	public MazeTask(Maze maze) {
		this.maze = maze;
	}

	@Override
	protected List<Direction> compute() {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	public LinkedList<Direction> RecSolve(Position p) {
		if (maze.getEnd().equals(p)) {
			return new LinkedList<Direction>();
		} else {
			visited.add(p);
			List<Direction> ds = maze.getMoves(p);
			for (Direction d : ds) {
				Position nextP = p.move(d);
				if (!visited.contains(nextP)) {
					LinkedList<Direction> sol = solve(nextP);
					if (sol != null) {
						sol.addFirst(d);
						return sol;
					}
				}
			}
			return null; // no solution
		}
	}

}
